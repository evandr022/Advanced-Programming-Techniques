package control;

import java.sql.ResultSet;
import java.util.Vector;

import javax.swing.JTable;
import javax.swing.table.TableModel;

import com.mysql.cj.jdbc.result.ResultSetMetaData;

import model.DBConnection;
import javax.swing.table.DefaultTableModel;

public class recipe {
	//Data members
	private String title;
	private String ingredients;
	private String category;
	private String recipe;
    DBConnection db = new DBConnection();


	//private byte[] imagem;
	
	// Logical Function code
	private model.recipe rcp = new model.recipe();
	
	public recipe(String title, String ingredients, String category, String recipe/*, byte[] imagem*/) {
		super();
		this.title = title;
		this.ingredients = ingredients;
		this.category = category;
		this.recipe = recipe;
		//this.imagem = imagem;
	}

	public recipe() {
		super();
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getIngredients() {
		return ingredients;
	}

	public void setIngredients(String ingredients) {
		this.ingredients = ingredients;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public String getRecipe() {
		return recipe;
	}

	public void setRecipe(String recipe) {
		this.recipe = recipe;
	}
	
	/*public byte[] getImagem() {
    	return imagem;
    }
    
    public void setImagem(byte[] imagem) {
        this.imagem = imagem;
    }*/	
	
	public boolean saveData() {
		rcp.setCategory(this.category);
		rcp.setIngredients(this.ingredients);
		rcp.setRecipe(this.recipe);
		rcp.setTitle(this.title);
		//rcp.setImagem(this.imagem);
		
		return rcp.saveData();
	}
	
	public void populateTable(JTable table, String category) {
		rcp.populateTable(table, category);
	}
	
	public void populateTable1(JTable table, String category2) {
		String query = "SELECT title FROM 'recipebook'.'recipedata' WHERE category='" + category2 + "'";
		ResultSet rs = db.executeSelect(query);
		
		if(rs != null) {
			table.setModel(resultSetToTableModel(rs));
		}
	}
	
	public TableModel resultSetToTableModel(ResultSet rs) {
		try {
			ResultSetMetaData metaData = (ResultSetMetaData) rs.getMetaData();
			int numberOfColums = metaData.getColumnCount();
			Vector columnNames = new Vector();
			
			for(int column = 0; column < numberOfColums; column++) {
				columnNames.addElement(metaData.getColumnLabel(column + 1));
			}
			
			Vector rows = new Vector();
			
			while (rs.next()) {
				Vector newRow = new Vector();
				
				for(int i = 1; i <= numberOfColums; i++) {
					newRow.addElement(rs.getObject(i));
				}
				rows.addElement(newRow);
			}
			
			return new DefaulTableModel(rows, columnNames);
		}catch (Exception e){
			e.printStackTrace();
			
			return null;
		}
	}

	public recipe getRecipeData() {
		rcp.setTitle(this.title);
		rcp = rcp.getRecipeData();
		
		if(rcp != null) {
			this.setIngredients(rcp.getIngredients());
			this.setRecipe(rcp.getRecipe());
			return this;
		}
		return null;
		
	}
	
	
}
